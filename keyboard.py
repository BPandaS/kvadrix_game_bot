from telebot import types


def none():
    return types.ReplyKeyboardRemove()


def create_keyboard(btn_lines):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for line in btn_lines:
        btn_arr = []
        for name in line:
            btn_arr.append(types.KeyboardButton(text=name))
        keyboard.add(*btn_arr)
    return keyboard


def create_inline_keyboard(btn_lines):
    keyboard = types.InlineKeyboardMarkup()
    for line in btn_lines:
        btn_arr = []
        for name, data in line:
            btn_arr.append(types.InlineKeyboardButton(text=name, callback_data=data))
        keyboard.add(*btn_arr)
    return keyboard


def start():
    return create_keyboard(
        [
            ['–ù–∞—á–∞—Ç—å']
        ]
    )


def back():
    return create_keyboard(
        [
            ['<< –ù–∞–∑–∞–¥']
        ]
    )


def end_dialog(bot, status=None):
    if status == 'leader':
        return create_keyboard(
            [
                ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥']
            ]
        )
    elif status == 'client':
        return create_keyboard(
            [
                ['üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω']
            ]
        ) 


def privacy_accept():
    return create_inline_keyboard(
        [
            [('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', 'privacy|deny'), ('–ü—Ä–∏–Ω—è—Ç—å', 'privacy|accept')]
        ]
    )


def get_user_data():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text='üì±–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
    return keyboard


def username_exists():
    return create_keyboard(
        [
            ['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å']
        ]
    )


def choose_group():
    return create_keyboard(
        [
            ['–í –∫–æ–º–∞–Ω–¥—É —Ç–æ–≥–æ, –∫—Ç–æ –º–µ–Ω—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª'],
        ]
    )


def full_choose_group():
    return create_keyboard(
        [
            ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞'],
            ['–ü–æ–π–¥—É –≤ –∫–æ–º–∞–Ω–¥—É –∫ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É']
        ]
    )


def not_exists_choose_group():
    return create_keyboard(
        [
            ['–í–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
            ['–í—Å—Ç—É–ø–∏—Ç—å –≤ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É']
        ]
    )


def text_to_leader(leader_id, clicked=False):
    if not clicked:
        return create_inline_keyboard(
            [
                [('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≠–∫—Å–ø–µ—Ä—Ç—É', f'text_to_leader|{leader_id}')]
            ]
        )
    else:
        return create_inline_keyboard(
            [
                [('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≠–∫—Å–ø–µ—Ä—Ç—É', '|')]
            ]
        )


# def yes_no_text_to_leader():
#     return create_inline_keyboard(
#         [
#             [('–î–∞', 'yes_no_text_to_leader|yes'), ('–ù–µ—Ç', 'yes_no_text_to_leader|no')]
#         ]
#     )



def text_to_leader_success(client_id, expert_id, clicked=False):
    if not clicked:
        return create_inline_keyboard(
            [
                [('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞', f'text_to_leader_success|{client_id} {expert_id}')]
            ]
        )
    else:
        return create_inline_keyboard(
            [
                [('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞', '|')]
            ]
        )


def expert_confirm(client_id, clicked=False):
    if not clicked:
        return create_inline_keyboard(
            [
                [('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞', f'expert_confirm|{client_id}')]
            ]
        )
    else:
        return create_inline_keyboard(
            [
                [('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞', '|')]
            ]
        )


def menu(bot, user_id):
    user_id = int(user_id)
    if user_id in bot.system_accounts:
        return create_keyboard(
        [
            ['üéÅ KVŒõDRIX GAME üéÅ'],
            ['üëë –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç üëë'],
            ['üí° –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', '–û–± –∏–≥—Ä–µ üé≤'],
            ['‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ üï∏'],
            ['–°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)']
        ]
    )
    elif user_id in bot.admins:
        return create_keyboard(
        [
            ['üéÅ KVŒõDRIX GAME üéÅ'],
            ['üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã üí≥'],
            ['üëë –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç üëë'],
            ['üí° –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', '–û–± –∏–≥—Ä–µ üé≤'],
            ['‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ üï∏'],
            ['–°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)']
        ]
    )
    else:
        return create_keyboard(
        [
            ['üéÅ KVŒõDRIX GAME üéÅ'],
            ['üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã üí≥'],
            ['üëë –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç üëë'],
            ['üí° –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', '–û–± –∏–≥—Ä–µ üé≤'],
            ['‚öôÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ üï∏']
        ]
    )


def about_game():
    return create_inline_keyboard(
        [
            [('üñ• –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è ', 'about_game|presentations')],
            [('–°—Ç–∞—Ç—É—Å—ã üéó', 'about_game|status')],
            [('üì∂ –£—Ä–æ–≤–Ω–∏', 'about_game|levels')],
            [('–ü—Ä–∞–≤–∏–ª–∞ üìñ', 'about_game|rules')],
        ]
    )


def back_about_game():
    return create_inline_keyboard(
        [
            [('<< –ù–∞–∑–∞–¥', 'about_game|back')]
        ]
    )


def start_game():
    return create_keyboard(
        [
            ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º'],
            ['–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ —Å–≤—è–∑–∏'],
            ['<< –ù–∞–∑–∞–¥']
        ]
    )


def get_referal_link(user_id):
    return create_inline_keyboard(
        [
            [('–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', f'get_referal_link|{user_id}')]
        ]
    )


def faq():
    return create_keyboard(
        [
            ['–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É'],
            ['<< –ù–∞–∑–∞–¥']
        ]
    )


def answer_faq(user_id, msg_id):
    return create_inline_keyboard(
        [
            [('–û—Ç–≤–µ—Ç–∏—Ç—å', f'answer_faq|{user_id} {msg_id}')]
        ]
    )


def know_base_test(is_done, test_num, len_texts):
    if is_done:
        if int(test_num) == len_texts - 1:
            return create_inline_keyboard(
                [
                    [('–ì–æ—Ç–æ–≤–æ ‚úÖ', f'know_base_test_done|{is_done} {test_num}')],
                ]
            )
        else:
            return create_inline_keyboard(
                [
                    [('–ì–æ—Ç–æ–≤–æ ‚úÖ', f'know_base_test_done|{is_done} {test_num}')],
                    [('–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Äî>', f'know_base_next|{is_done} {test_num}')]
                ]
            )
    else:
        if int(test_num) == len_texts - 1:
            return create_inline_keyboard(
                [
                    [('–ì–æ—Ç–æ–≤–æ', f'know_base_test_done|{is_done} {test_num}')],
                ]
            )
        else:   
            return create_inline_keyboard(
                [
                    [('–ì–æ—Ç–æ–≤–æ', f'know_base_test_done|{is_done} {test_num}')],
                    [('–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Äî>', f'know_base_next|{is_done} {test_num}')]
                ]
            )


def team_control(bot, cur_user_id):
    keyboard = types.InlineKeyboardMarkup()

    cur_user = bot.user_exists(id=cur_user_id)
    producer_1, producer_2 = cur_user.left, cur_user.right
    if producer_1 is not None:
        keyboard.add(types.InlineKeyboardButton(text=f'@{bot.user_exists(id=producer_1).username}', callback_data='|'),
                        types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'team_control_delete|{producer_1}'))
    if producer_2 is not None:
        keyboard.add(types.InlineKeyboardButton(text=f'@{bot.user_exists(id=producer_2).username}', callback_data='|'),
                        types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'team_control_delete|{producer_2}'))

    return keyboard


def yes_no():
    return create_keyboard(
        [
            ['–î–∞', '–ù–µ—Ç']
        ]
    )


def start_text_users(bot, users_start_text):
    keyboard = types.InlineKeyboardMarkup()
    
    for user_id in users_start_text:
        user = bot.user_exists(id=user_id)
        keyboard.add(types.InlineKeyboardButton(text=f'@{user.username}', callback_data=f'start_text_users|{user_id}'))

    return keyboard


def my_account():
    return create_keyboard(
        [
            # ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏'],
            ['<< –ù–∞–∑–∞–¥']
        ]
    )


def game_list():
    return create_keyboard(
        [
            ['GAME-1', 'START']
            # ['GAME-1', 'GAME-2', 'START']
        ]
    )


def level_choice():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    keyboard.add(types.KeyboardButton(text='1'), types.KeyboardButton(text='2'),
                types.KeyboardButton(text='3'), types.KeyboardButton(text='4'))
    return keyboard